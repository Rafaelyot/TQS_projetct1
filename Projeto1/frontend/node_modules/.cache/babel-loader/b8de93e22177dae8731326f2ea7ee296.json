{"ast":null,"code":"import _regeneratorRuntime from \"/home/noone/Desktop/TQS/Projeto1/black-dashboard-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/noone/Desktop/TQS/Projeto1/black-dashboard-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/noone/Desktop/TQS/Projeto1/black-dashboard-react/src/views/Historical.js\";\nimport React from \"react\"; // nodejs library that concatenates classes\n\nimport classNames from \"classnames\"; // react plugin used to create charts\n\nimport { Line, Bar } from \"react-chartjs-2\"; // reactstrap components\n\nimport { Button, ButtonGroup, Card, CardHeader, CardBody, CardTitle, DropdownToggle, DropdownMenu, DropdownItem, UncontrolledDropdown, Label, FormGroup, Input, Table, Row, Col, UncontrolledTooltip } from \"reactstrap\"; // core components\n\nimport { chartExample1, chartExample2, chartExample3, chartExample4 } from \"variables/charts.js\";\nimport axios from \"axios\";\nconst REST_HOST = process.env.REACT_APP_REST_HOST;\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n    this.loadData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var latitude, longitude, hours, href, _yield$axios$get, data, historical, historical_data, labels, dataset_data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            latitude = 39.91177;\n            longitude = 8.43568;\n            hours = _this.state.horas;\n            href = \"\".concat(REST_HOST, \"/air/history/lat=\").concat(latitude, \"&long=\").concat(longitude, \"&hours=\").concat(hours);\n            _context.next = 6;\n            return axios.get(href);\n\n          case 6:\n            _yield$axios$get = _context.sent;\n            data = _yield$axios$get.data;\n            historical = data.temporal_conditions;\n            historical_data = [];\n            historical.map(value => {\n              historical_data.push({\n                date: new Date(value.date).toLocaleString('pt-PT', {\n                  'hour12': false\n                }),\n                air_score: value.air_score\n              });\n            });\n            labels = [];\n            dataset_data = [];\n            historical_data.map(value => {\n              labels.push(value.date);\n              dataset_data.push(value.air_score);\n            });\n            _context.next = 16;\n            return _this.setState({\n              labels: labels,\n              dataset_data: dataset_data\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    this.fullData = canvas => {\n      let ctx = canvas.getContext(\"2d\");\n      let gradientStrokeForecast = ctx.createLinearGradient(0, 230, 0, 50);\n      let gradientStrokeHistorical = ctx.createLinearGradient(0, 230, 0, 50);\n      gradientStrokeForecast.addColorStop(1, \"rgba(29,140,248,0.2)\");\n      gradientStrokeForecast.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\n      gradientStrokeForecast.addColorStop(0, \"rgba(29,140,248,0)\"); //blue colors\n\n      gradientStrokeHistorical.addColorStop(1, \"rgb(186, 84, 245,0.2)\");\n      gradientStrokeHistorical.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\n      gradientStrokeForecast.addColorStop(0, \"#ba54f5\"); //blue colors\n\n      const dataSize = this.state.dataset_data.length;\n      const historical_data = this.state.dataset_data.slice(0, dataSize / 2);\n      const forecast_data = this.state.dataset_data.slice(dataSize / 2, dataSize + 1);\n\n      for (let i = 0; i < dataSize / 2; i++) {\n        historical_data.push(null);\n        forecast_data.unshift(null);\n      }\n\n      return {\n        labels: this.state.labels,\n        datasets: [{\n          label: \"Historical Score\",\n          fill: true,\n          backgroundColor: gradientStrokeHistorical,\n          borderColor: \"#ba54f5\",\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: \"#ba54f5\",\n          pointBorderColor: \"rgba(255,255,255,0)\",\n          pointHoverBackgroundColor: \"#ba54f5\",\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: historical_data\n        }, {\n          label: \"Forecast Score\",\n          fill: true,\n          backgroundColor: gradientStrokeForecast,\n          borderColor: \"#1f8ef1\",\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: \"#1f8ef1\",\n          pointBorderColor: \"rgba(255,255,255,0)\",\n          pointHoverBackgroundColor: \"#1f8ef1\",\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: forecast_data\n        }]\n      };\n    };\n\n    this.setBgChartData = name => {\n      this.setState({\n        bigChartData: name\n      });\n    };\n\n    this.elementClick = e => {\n      console.log(e);\n    };\n\n    this.state = {\n      bigChartData: \"data1\",\n      labels: [],\n      dataset_data: [],\n      horas: 10\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"card-chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      className: \"text-left\",\n      sm: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"card-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 45\n      }\n    }, \"Air Condition\"), /*#__PURE__*/React.createElement(CardTitle, {\n      tag: \"h2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 45\n      }\n    }, \"Historical/Forecast\")), /*#__PURE__*/React.createElement(Col, {\n      sm: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 45\n      }\n    }, \"Horas\"), /*#__PURE__*/React.createElement(Input, {\n      defaultValue: this.state.horas,\n      placeholder: \"Horas\",\n      type: \"number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      sm: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-fill\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 45\n      }\n    }, \"Submeter\")))), /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chart-area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      data: this.fullData,\n      options: chartExample1.options,\n      onElementsClick: this.elementClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 41\n      }\n    }))))))));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/noone/Desktop/TQS/Projeto1/black-dashboard-react/src/views/Historical.js"],"names":["React","classNames","Line","Bar","Button","ButtonGroup","Card","CardHeader","CardBody","CardTitle","DropdownToggle","DropdownMenu","DropdownItem","UncontrolledDropdown","Label","FormGroup","Input","Table","Row","Col","UncontrolledTooltip","chartExample1","chartExample2","chartExample3","chartExample4","axios","REST_HOST","process","env","REACT_APP_REST_HOST","Dashboard","Component","constructor","props","loadData","latitude","longitude","hours","state","horas","href","get","data","historical","temporal_conditions","historical_data","map","value","push","date","Date","toLocaleString","air_score","labels","dataset_data","setState","fullData","canvas","ctx","getContext","gradientStrokeForecast","createLinearGradient","gradientStrokeHistorical","addColorStop","dataSize","length","slice","forecast_data","i","unshift","datasets","label","fill","backgroundColor","borderColor","borderWidth","borderDash","borderDashOffset","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","setBgChartData","name","bigChartData","elementClick","e","console","log","componentDidMount","render","options"],"mappings":"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","sourcesContent":["import React from \"react\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n// react plugin used to create charts\nimport {Line, Bar} from \"react-chartjs-2\";\n\n// reactstrap components\nimport {\n    Button,\n    ButtonGroup,\n    Card,\n    CardHeader,\n    CardBody,\n    CardTitle,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    UncontrolledDropdown,\n    Label,\n    FormGroup,\n    Input,\n    Table,\n    Row,\n    Col,\n    UncontrolledTooltip\n} from \"reactstrap\";\n\n// core components\nimport {\n    chartExample1,\n    chartExample2,\n    chartExample3,\n    chartExample4\n} from \"variables/charts.js\";\nimport axios from \"axios\";\n\nconst REST_HOST = process.env.REACT_APP_REST_HOST\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bigChartData: \"data1\",\n            labels: [],\n            dataset_data: [],\n            horas: 10\n\n        };\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData = async () => {\n        const latitude = 39.91177;\n        const longitude = 8.43568;\n        const hours = this.state.horas;\n        const href = `${REST_HOST}/air/history/lat=${latitude}&long=${longitude}&hours=${hours}`;\n        const {data} = await axios.get(href);\n\n        const historical = data.temporal_conditions;\n        const historical_data = [];\n        historical.map((value) => {\n            historical_data.push({\n                date: new Date(value.date).toLocaleString('pt-PT', {\n                    'hour12': false,\n                }),\n                air_score: value.air_score\n            })\n        });\n\n        const labels = [];\n        const dataset_data = [];\n        historical_data.map((value) => {\n            labels.push(value.date);\n            dataset_data.push(value.air_score);\n        });\n\n\n        await this.setState({\n                labels: labels,\n                dataset_data: dataset_data\n            }\n        );\n\n    };\n\n    fullData = canvas => {\n        let ctx = canvas.getContext(\"2d\");\n\n        let gradientStrokeForecast = ctx.createLinearGradient(0, 230, 0, 50);\n        let gradientStrokeHistorical = ctx.createLinearGradient(0, 230, 0, 50);\n\n        gradientStrokeForecast.addColorStop(1, \"rgba(29,140,248,0.2)\");\n        gradientStrokeForecast.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\n        gradientStrokeForecast.addColorStop(0, \"rgba(29,140,248,0)\"); //blue colors\n\n\n        gradientStrokeHistorical.addColorStop(1, \"rgb(186, 84, 245,0.2)\");\n        gradientStrokeHistorical.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\n        gradientStrokeForecast.addColorStop(0, \"#ba54f5\"); //blue colors\n\n\n        const dataSize = this.state.dataset_data.length;\n\n        const historical_data = this.state.dataset_data.slice(0, dataSize / 2);\n        const forecast_data = this.state.dataset_data.slice(dataSize / 2, dataSize + 1);\n        for (let i = 0; i < dataSize / 2; i++) {\n            historical_data.push(null);\n            forecast_data.unshift(null);\n        }\n\n        return {\n            labels: this.state.labels,\n            datasets: [\n                {\n                    label: \"Historical Score\",\n                    fill: true,\n                    backgroundColor: gradientStrokeHistorical,\n                    borderColor: \"#ba54f5\",\n                    borderWidth: 2,\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    pointBackgroundColor: \"#ba54f5\",\n                    pointBorderColor: \"rgba(255,255,255,0)\",\n                    pointHoverBackgroundColor: \"#ba54f5\",\n                    pointBorderWidth: 20,\n                    pointHoverRadius: 4,\n                    pointHoverBorderWidth: 15,\n                    pointRadius: 4,\n                    data: historical_data\n                },\n                {\n                    label: \"Forecast Score\",\n                    fill: true,\n                    backgroundColor: gradientStrokeForecast,\n                    borderColor: \"#1f8ef1\",\n                    borderWidth: 2,\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    pointBackgroundColor: \"#1f8ef1\",\n                    pointBorderColor: \"rgba(255,255,255,0)\",\n                    pointHoverBackgroundColor: \"#1f8ef1\",\n                    pointBorderWidth: 20,\n                    pointHoverRadius: 4,\n                    pointHoverBorderWidth: 15,\n                    pointRadius: 4,\n                    data: forecast_data\n                }\n            ]\n        };\n    };\n\n\n    setBgChartData = name => {\n        this.setState({\n            bigChartData: name\n        });\n    };\n\n\n    elementClick = (e) => {\n        console.log(e);\n    };\n\n    render() {\n        return (\n            <>\n                <div className=\"content\">\n                    <Row>\n                        <Col xs=\"12\">\n                            <Card className=\"card-chart\">\n                                <CardHeader>\n                                    <Row >\n                                        <Col className=\"text-left\" sm=\"6\">\n                                            <h5 className=\"card-category\">Air Condition</h5>\n                                            <CardTitle tag=\"h2\">Historical/Forecast</CardTitle>\n                                        </Col>\n                                        <Col sm=\"3\">\n                                            <label>Horas</label>\n                                            <Input\n                                                defaultValue={this.state.horas}\n                                                placeholder=\"Horas\"\n                                                type=\"number\"\n                                            />\n                                        </Col>\n                                        <Col sm=\"3\">\n\n                                            <Button className=\"btn-fill\" color=\"primary\">\n                                                Submeter\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                </CardHeader>\n                                <CardBody>\n                                    <div className=\"chart-area\">\n                                        <Line\n                                            data={this.fullData}\n                                            options={chartExample1.options}\n                                            onElementsClick={this.elementClick}\n                                        />\n                                    </div>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}