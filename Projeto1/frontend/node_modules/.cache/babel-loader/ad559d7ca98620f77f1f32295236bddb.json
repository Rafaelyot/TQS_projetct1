{"ast":null,"code":"import _regeneratorRuntime from \"/home/noone/Desktop/TQS/Projeto1/black-dashboard-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/noone/Desktop/TQS/Projeto1/black-dashboard-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/noone/Desktop/TQS/Projeto1/black-dashboard-react/src/views/AirQualiy.js\";\nimport React from \"react\"; // nodejs library that concatenates classes\n\nimport classNames from \"classnames\"; // react plugin used to create charts\n\nimport { Line, Bar } from \"react-chartjs-2\"; // reactstrap components\n\nimport { Button, ButtonGroup, Card, CardHeader, CardBody, CardTitle, DropdownToggle, DropdownMenu, DropdownItem, UncontrolledDropdown, Label, FormGroup, Input, Table, Row, Col, UncontrolledTooltip, CardText, CardFooter } from \"reactstrap\"; // core components\n\nimport { chartExample1, chartExample2, chartExample3, chartExample4 } from \"variables/charts.js\";\nimport axios from 'axios';\nconst REST_HOST = process.env.REACT_APP_REST_HOST;\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.setBgChartData = name => {\n      this.setState({\n        bigChartData: name\n      });\n    };\n\n    this.parsePollutants = pollutants => {\n      let non_null_pollutants = [];\n      Object.keys(pollutants).map(key => {\n        const pollutant = pollutants[key];\n        if (pollutant !== null) non_null_pollutants.push(pollutant);\n      });\n      return non_null_pollutants;\n    };\n\n    this.parseDate = dateStr => {\n      let date = new Date(dateStr);\n      return date.toDateString();\n    };\n\n    this.get_air_quality_data = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var city_data, latitude, longitude, href, _yield$axios$get, data, current_air_condition, pollutants, date, weatherData;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            city_data = JSON.parse(localStorage.getItem('city_data'));\n            _context.next = 3;\n            return _this.setState({\n              city_data: city_data\n            });\n\n          case 3:\n            latitude = _this.state.city_data.cityLatitude;\n            longitude = _this.state.city_data.cityLongitude;\n            href = \"\".concat(REST_HOST, \"/air/lat=\").concat(latitude, \"&long=\").concat(longitude);\n            _context.next = 8;\n            return axios.get(href);\n\n          case 8:\n            _yield$axios$get = _context.sent;\n            data = _yield$axios$get.data;\n            console.log(data);\n            current_air_condition = data.current_air_condition;\n            pollutants = _this.parsePollutants(data.current_air_condition.pollutants);\n            date = _this.parseDate(data.current_air_condition.date);\n            weatherData = {\n              category: current_air_condition.category,\n              color: current_air_condition.color,\n              pollutants: pollutants,\n              date: date,\n              air_score: current_air_condition.air_score\n            };\n            _context.next = 17;\n            return _this.setState({\n              weatherData: weatherData\n            });\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    this.pollutantInfo = name => {\n      let pollutantData = {\n        display_name: name,\n        full_name: \"\",\n        concentration_value: 0,\n        concentration_units: 0\n      };\n\n      for (let i = 0; i < this.state.weatherData.pollutants.length; i++) {\n        const pollutant = this.state.weatherData.pollutants[i];\n\n        if (display_name === pollutant.display_name) {\n          pollutantData.full_name = pollutant.full_name;\n          pollutantData.concentration_value = pollutant.concentration.value;\n          pollutantData.concentration_units = pollutant.concentration.units;\n          break;\n        }\n      }\n\n      console.log(pollutantData);\n    };\n\n    let date_now = new Date();\n    this.state = {\n      bigChartData: \"data1\",\n      city_data: {\n        cityName: '',\n        cityId: '',\n        cityLatitude: '',\n        cityLongitude: ''\n      },\n      weatherData: {\n        category: '',\n        color: '',\n        pollutants: [],\n        date: date_now.toDateString(),\n        air_score: 0\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.get_air_quality_data().then(r => {});\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"card-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"author\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block block-one\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block block-two\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block block-three\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block block-four\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: e => e.preventDefault(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      alt: \"...\",\n      className: \"avatar\",\n      src: require(\"assets/img/qualidade-do-ar.png\"),\n      style: {\n        border: \"none\",\n        \"border-radius\": \"0\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 45\n      }\n    }, this.state.city_data.cityName)), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"description\",\n      style: {\n        color: this.state.weatherData.color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 45\n      }\n    }, this.state.weatherData.category, \" : \", this.state.weatherData.air_score)), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 45\n      }\n    }, \"Last update :\"), \" \\xA0\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 72\n      }\n    }, this.state.weatherData.date))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 37\n      }\n    }, \"Do not be scared of the truth because we need to restart the human foundation in truth And I love you like Kanye loves Kanye I love Rick Owens\\u2019 bed design but the back is...\")), /*#__PURE__*/React.createElement(CardFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"author\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 45\n      }\n    }, \"Poluentes\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 37\n      }\n    }, this.state.weatherData.pollutants.map(pollutant => {\n      return /*#__PURE__*/React.createElement(Button, {\n        className: \"btn-icon btn-round\",\n        color: \"facebook\",\n        onClick: pollutantInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          \"font-size\": \"10px\",\n          color: pollutant.aqi_information.baqi.color\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 57\n        }\n      }, \" \", pollutant.display_name));\n    }))))))));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/noone/Desktop/TQS/Projeto1/black-dashboard-react/src/views/AirQualiy.js"],"names":["React","classNames","Line","Bar","Button","ButtonGroup","Card","CardHeader","CardBody","CardTitle","DropdownToggle","DropdownMenu","DropdownItem","UncontrolledDropdown","Label","FormGroup","Input","Table","Row","Col","UncontrolledTooltip","CardText","CardFooter","chartExample1","chartExample2","chartExample3","chartExample4","axios","REST_HOST","process","env","REACT_APP_REST_HOST","Dashboard","Component","constructor","props","setBgChartData","name","setState","bigChartData","parsePollutants","pollutants","non_null_pollutants","Object","keys","map","key","pollutant","push","parseDate","dateStr","date","Date","toDateString","get_air_quality_data","city_data","JSON","parse","localStorage","getItem","latitude","state","cityLatitude","longitude","cityLongitude","href","get","data","console","log","current_air_condition","weatherData","category","color","air_score","pollutantInfo","pollutantData","display_name","full_name","concentration_value","concentration_units","i","length","concentration","value","units","date_now","cityName","cityId","componentDidMount","then","r","render","e","preventDefault","require","border","aqi_information","baqi"],"mappings":"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","sourcesContent":["import React from \"react\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n// react plugin used to create charts\nimport {Line, Bar} from \"react-chartjs-2\";\n\n// reactstrap components\nimport {\n    Button,\n    ButtonGroup,\n    Card,\n    CardHeader,\n    CardBody,\n    CardTitle,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    UncontrolledDropdown,\n    Label,\n    FormGroup,\n    Input,\n    Table,\n    Row,\n    Col,\n    UncontrolledTooltip, CardText, CardFooter\n} from \"reactstrap\";\n\n// core components\nimport {\n    chartExample1,\n    chartExample2,\n    chartExample3,\n    chartExample4\n} from \"variables/charts.js\";\nimport axios from 'axios';\n\nconst REST_HOST = process.env.REACT_APP_REST_HOST\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        let date_now = new Date();\n        this.state = {\n            bigChartData: \"data1\",\n            city_data: {\n                cityName: '',\n                cityId: '',\n                cityLatitude: '',\n                cityLongitude: '',\n            },\n            weatherData: {\n                category: '',\n                color: '',\n                pollutants: [],\n                date: date_now.toDateString(),\n                air_score: 0\n\n            }\n        };\n    }\n\n    setBgChartData = name => {\n        this.setState({\n            bigChartData: name\n        });\n    };\n\n    parsePollutants = (pollutants) => {\n        let non_null_pollutants = [];\n\n        Object.keys(pollutants).map((key) => {\n            const pollutant = pollutants[key];\n            if (pollutant !== null)\n                non_null_pollutants.push(pollutant);\n        });\n\n        return non_null_pollutants;\n    };\n\n    parseDate = (dateStr) => {\n        let date = new Date(dateStr);\n        return date.toDateString();\n    }\n\n\n    get_air_quality_data = async () => {\n        const city_data = JSON.parse(localStorage.getItem('city_data'));\n        await this.setState({\n            city_data: city_data\n        });\n\n        const latitude = this.state.city_data.cityLatitude;\n        const longitude = this.state.city_data.cityLongitude;\n\n        const href = `${REST_HOST}/air/lat=${latitude}&long=${longitude}`;\n\n        const {data} = await axios.get(href);\n\n        console.log(data)\n        const current_air_condition = data.current_air_condition;\n        const pollutants = this.parsePollutants(data.current_air_condition.pollutants);\n        const date = this.parseDate(data.current_air_condition.date);\n\n        const weatherData = {\n            category: current_air_condition.category,\n            color: current_air_condition.color,\n            pollutants: pollutants,\n            date: date,\n            air_score: current_air_condition.air_score\n        };\n\n        await this.setState({weatherData: weatherData});\n\n        //console.log(this.state);\n    };\n\n\n    componentDidMount() {\n        this.get_air_quality_data().then(r => {\n        });\n    }\n\n    pollutantInfo = (name) => {\n\n        let pollutantData = {\n            display_name: name,\n            full_name: \"\",\n            concentration_value: 0,\n            concentration_units: 0\n        };\n\n        for (let i = 0; i < this.state.weatherData.pollutants.length; i++) {\n            const pollutant = this.state.weatherData.pollutants[i];\n            if (display_name === pollutant.display_name) {\n                pollutantData.full_name = pollutant.full_name;\n                pollutantData.concentration_value = pollutant.concentration.value;\n                pollutantData.concentration_units = pollutant.concentration.units;\n                break;\n            }\n        }\n        console.log(pollutantData)\n    };\n\n\n    render() {\n        return (\n            <>\n                <div className=\"content\">\n                    <Row>\n                        <Col md=\"12\">\n                            <Card className=\"card-user\">\n                                <CardBody>\n                                    <CardText/>\n                                    <div className=\"author\">\n                                        <div className=\"block block-one\"/>\n                                        <div className=\"block block-two\"/>\n                                        <div className=\"block block-three\"/>\n                                        <div className=\"block block-four\"/>\n                                        <a onClick={e => e.preventDefault()}>\n                                            <img\n                                                alt=\"...\"\n                                                className=\"avatar\"\n                                                src={require(\"assets/img/qualidade-do-ar.png\")}\n                                                style={{border: \"none\", \"border-radius\": \"0\"}}\n                                            />\n                                            <h5 className=\"title\">{this.state.city_data.cityName}</h5>\n                                        </a>\n                                        <p className=\"description\"\n                                           style={{color: this.state.weatherData.color}}>\n                                            <b>{this.state.weatherData.category} : {this.state.weatherData.air_score}</b>\n                                        </p>\n                                        <p className=\"date\">\n                                            <b>Last update :</b> &nbsp;<h3>{this.state.weatherData.date}</h3></p>\n                                    </div>\n                                    <div className=\"card-description\">\n                                        Do not be scared of the truth because we need to restart the\n                                        human foundation in truth And I love you like Kanye loves\n                                        Kanye I love Rick Owens’ bed design but the back is...\n                                    </div>\n                                </CardBody>\n                                <CardFooter>\n                                    <div className=\"author\">\n                                        <h1><b>Poluentes</b></h1>\n                                    </div>\n                                    <div className=\"button-container\">\n                                        {\n                                            this.state.weatherData.pollutants.map((pollutant) => {\n                                                return (\n                                                    <Button className=\"btn-icon btn-round\" color=\"facebook\" onClick={pollutantInfo}>\n                                                        <span\n                                                            style={{\n                                                                \"font-size\": \"10px\",\n                                                                color: pollutant.aqi_information.baqi.color\n                                                            }}> {pollutant.display_name}</span>\n                                                    </Button>\n                                                )\n                                            })\n                                        }\n                                    </div>\n                                </CardFooter>\n                            </Card>\n                        </Col>\n                    </Row>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}