{"ast":null,"code":"import _regeneratorRuntime from \"/home/noone/Desktop/TQS_projetct1/Projeto1/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/noone/Desktop/TQS_projetct1/Projeto1/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/noone/Desktop/TQS_projetct1/Projeto1/frontend/src/views/Historical.js\";\nimport React from \"react\"; // nodejs library that concatenates classes\n\nimport classNames from \"classnames\"; // react plugin used to create charts\n\nimport { Line, Bar } from \"react-chartjs-2\"; // reactstrap components\n\nimport { Button, ButtonGroup, Card, CardHeader, CardBody, CardTitle, DropdownToggle, DropdownMenu, DropdownItem, UncontrolledDropdown, Label, FormGroup, Input, Table, Row, Col, UncontrolledTooltip, Form } from \"reactstrap\"; // core components\n\nimport { chartExample1, chartExample2, chartExample3, chartExample4 } from \"variables/charts.js\";\nimport axios from \"axios\";\nimport NotificationAlert from \"react-notification-alert\";\nconst REST_HOST = process.env.REACT_APP_REST_HOST;\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n    this.loadData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var city_data, latitude, longitude, hours, href, data, dataR, historical, historical_data, labels, dataset_data, raw_dates;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            city_data = JSON.parse(localStorage.getItem('city_data'));\n            _context.next = 3;\n            return _this.setState({\n              city_data: city_data\n            });\n\n          case 3:\n            latitude = _this.state.city_data.cityLatitude;\n            longitude = _this.state.city_data.cityLongitude;\n            hours = _this.state.horas;\n            href = \"\".concat(REST_HOST, \"/air/history/lat=\").concat(latitude, \"&long=\").concat(longitude, \"&hours=\").concat(hours);\n            data = [];\n            _context.prev = 8;\n            _context.next = 11;\n            return axios.get(href);\n\n          case 11:\n            dataR = _context.sent;\n            data = dataR.data;\n            _context.next = 19;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](8);\n\n            _this.renderErrorNotification([\"Erro a fazer o pedido\"]);\n\n            return _context.abrupt(\"return\");\n\n          case 19:\n            historical = data.temporal_conditions;\n            historical_data = [];\n            historical.map(value => {\n              historical_data.push({\n                date: new Date(value.date).toLocaleString('pt-PT', {\n                  'hour12': false\n                }),\n                air_score: value.air_score,\n                raw_date: Date.parse(value.date)\n              });\n            });\n            labels = [];\n            dataset_data = [];\n            raw_dates = [];\n            historical_data.map(value => {\n              labels.push(value.date);\n              dataset_data.push(value.air_score);\n              raw_dates.push(value.raw_date);\n            });\n            _context.next = 28;\n            return _this.setState({\n              labels: labels,\n              dataset_data: dataset_data,\n              raw_dates: raw_dates\n            });\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[8, 15]]);\n    }));\n\n    this.fullData = canvas => {\n      let ctx = canvas.getContext(\"2d\");\n      let gradientStrokeForecast = ctx.createLinearGradient(0, 230, 0, 50);\n      let gradientStrokeHistorical = ctx.createLinearGradient(0, 230, 0, 50);\n      gradientStrokeForecast.addColorStop(1, \"rgba(29,140,248,0.2)\");\n      gradientStrokeForecast.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\n      gradientStrokeForecast.addColorStop(0, \"rgba(29,140,248,0)\");\n      gradientStrokeHistorical.addColorStop(1, \"rgb(186, 84, 245,0.2)\");\n      gradientStrokeHistorical.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\n      gradientStrokeForecast.addColorStop(0, \"#ba54f5\");\n      const dataSize = this.state.dataset_data.length;\n      const historical_data = this.state.dataset_data.slice(0, dataSize / 2);\n      const forecast_data = this.state.dataset_data.slice(dataSize / 2, dataSize + 1);\n\n      for (let i = 0; i < dataSize / 2; i++) {\n        historical_data.push(null);\n        forecast_data.unshift(null);\n      }\n\n      return {\n        labels: this.state.labels,\n        datasets: [{\n          label: \"Historical Score\",\n          fill: true,\n          backgroundColor: gradientStrokeHistorical,\n          borderColor: \"#ba54f5\",\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: \"#ba54f5\",\n          pointBorderColor: \"rgba(255,255,255,0)\",\n          pointHoverBackgroundColor: \"#ba54f5\",\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: historical_data\n        }, {\n          label: \"Forecast Score\",\n          fill: true,\n          backgroundColor: gradientStrokeForecast,\n          borderColor: \"#1f8ef1\",\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: \"#1f8ef1\",\n          pointBorderColor: \"rgba(255,255,255,0)\",\n          pointHoverBackgroundColor: \"#1f8ef1\",\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: forecast_data\n        }]\n      };\n    };\n\n    this.elementClick = e => {\n      if (e.length === 0) return;\n      const data = e[0];\n      const index = data._index;\n      const pickedRawData = this.state.raw_dates[index];\n      this.fetchTemporalAir(pickedRawData);\n    };\n\n    this.fetchTemporalAir = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(raw_data) {\n        var latitude, longitude, href, data, Rdata;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              latitude = _this.state.city_data.cityLatitude;\n              longitude = _this.state.city_data.cityLongitude;\n              href = \"\".concat(REST_HOST, \"/air/by-date/lat=\").concat(latitude, \"&long=\").concat(longitude, \"&datetime=\").concat(raw_data);\n              data = [];\n              _context2.prev = 4;\n              _context2.next = 7;\n              return axios.get(href);\n\n            case 7:\n              Rdata = _context2.sent;\n              data = Rdata.data;\n              _context2.next = 15;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](4);\n\n              _this.renderErrorNotification([\"Erro a fazer o pedido\"]);\n\n              return _context2.abrupt(\"return\");\n\n            case 15:\n              localStorage.setItem('historical_city_data', JSON.stringify(data));\n              window.location.href = \"/admin/air\";\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[4, 11]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    this.defineHours = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n        var horas;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              event.preventDefault();\n              horas = _this.horasInput.current._reactInternalFiber.child.stateNode.valueAsNumber;\n              _context3.next = 4;\n              return _this.setState({\n                horas: horas\n              });\n\n            case 4:\n              _this.loadData();\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    this.state = {\n      bigChartData: \"data1\",\n      labels: [],\n      dataset_data: [],\n      raw_dates: [],\n      horas: 3,\n      city_data: {\n        cityName: '',\n        cityId: '',\n        cityLatitude: '',\n        cityLongitude: ''\n      }\n    };\n    this.horasInput = React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  renderErrorNotification(errors, time) {\n    if (time === undefined) time = 5;\n    var options = {};\n    options = {\n      place: \"br\",\n      message: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      }, errors.map(value => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }\n        }, value);\n      })),\n      icon: \"tim-icons icon-alert-circle-exc\",\n      type: \"danger\",\n      autoDismiss: time\n    };\n    this.refs.notificationAlert.notificationAlert(options);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"react-notification-alert-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NotificationAlert, {\n      ref: \"notificationAlert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"card-chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.defineHours,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      className: \"text-left\",\n      sm: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"card-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 49\n      }\n    }, this.state.city_data.cityName), /*#__PURE__*/React.createElement(CardTitle, {\n      tag: \"h2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 49\n      }\n    }, \"Historical/Forecast\")), /*#__PURE__*/React.createElement(Col, {\n      sm: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 49\n      }\n    }, \"Horas\"), /*#__PURE__*/React.createElement(Input, {\n      ref: this.horasInput,\n      defaultValue: this.state.horas,\n      placeholder: \"Horas\",\n      type: \"number\",\n      step: \"1\",\n      name: \"horas\",\n      id: \"horas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      sm: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-fill\",\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 49\n      }\n    }, \"Submeter\"))))), /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chart-area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      data: this.fullData,\n      options: chartExample1.options,\n      onElementsClick: this.elementClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 41\n      }\n    }))))))));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/noone/Desktop/TQS_projetct1/Projeto1/frontend/src/views/Historical.js"],"names":["React","classNames","Line","Bar","Button","ButtonGroup","Card","CardHeader","CardBody","CardTitle","DropdownToggle","DropdownMenu","DropdownItem","UncontrolledDropdown","Label","FormGroup","Input","Table","Row","Col","UncontrolledTooltip","Form","chartExample1","chartExample2","chartExample3","chartExample4","axios","NotificationAlert","REST_HOST","process","env","REACT_APP_REST_HOST","Dashboard","Component","constructor","props","loadData","city_data","JSON","parse","localStorage","getItem","setState","latitude","state","cityLatitude","longitude","cityLongitude","hours","horas","href","data","get","dataR","renderErrorNotification","historical","temporal_conditions","historical_data","map","value","push","date","Date","toLocaleString","air_score","raw_date","labels","dataset_data","raw_dates","fullData","canvas","ctx","getContext","gradientStrokeForecast","createLinearGradient","gradientStrokeHistorical","addColorStop","dataSize","length","slice","forecast_data","i","unshift","datasets","label","fill","backgroundColor","borderColor","borderWidth","borderDash","borderDashOffset","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","elementClick","e","index","_index","pickedRawData","fetchTemporalAir","raw_data","Rdata","setItem","stringify","window","location","defineHours","event","preventDefault","horasInput","current","_reactInternalFiber","child","stateNode","valueAsNumber","bigChartData","cityName","cityId","createRef","componentDidMount","errors","time","undefined","options","place","message","icon","type","autoDismiss","refs","notificationAlert","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n// react plugin used to create charts\nimport {Line, Bar} from \"react-chartjs-2\";\n\n// reactstrap components\nimport {\n    Button,\n    ButtonGroup,\n    Card,\n    CardHeader,\n    CardBody,\n    CardTitle,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    UncontrolledDropdown,\n    Label,\n    FormGroup,\n    Input,\n    Table,\n    Row,\n    Col,\n    UncontrolledTooltip,\n    Form,\n} from \"reactstrap\";\n\n// core components\nimport {\n    chartExample1,\n    chartExample2,\n    chartExample3,\n    chartExample4\n} from \"variables/charts.js\";\nimport axios from \"axios\";\nimport NotificationAlert from \"react-notification-alert\";\n\nconst REST_HOST = process.env.REACT_APP_REST_HOST\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bigChartData: \"data1\",\n            labels: [],\n            dataset_data: [],\n            raw_dates: [],\n            horas: 3,\n            city_data: {\n                cityName: '',\n                cityId: '',\n                cityLatitude: '',\n                cityLongitude: '',\n\n            }\n\n        };\n\n        this.horasInput = React.createRef();\n    }\n\n    componentDidMount() {\n\n        this.loadData();\n    }\n\n    renderErrorNotification(errors, time) {\n        if (time === undefined)\n            time = 5;\n        var options = {};\n\n        options = {\n            place: \"br\",\n            message: (\n                <div>\n                    {errors.map((value) => {\n                        return (\n                            <li>{value}</li>\n                        )\n                    })}\n                </div>\n            ),\n            icon: \"tim-icons icon-alert-circle-exc\",\n            type: \"danger\",\n            autoDismiss: time\n        };\n\n\n        this.refs.notificationAlert.notificationAlert(options);\n\n    }\n\n\n    loadData = async () => {\n        const city_data = JSON.parse(localStorage.getItem('city_data'));\n\n\n        await this.setState({\n            city_data: city_data\n        });\n\n        const latitude = this.state.city_data.cityLatitude;\n        const longitude = this.state.city_data.cityLongitude;\n        let hours = this.state.horas;\n        const href = `${REST_HOST}/air/history/lat=${latitude}&long=${longitude}&hours=${hours}`;\n        let data = []\n        try {\n            const dataR = await axios.get(href);\n            data = dataR.data;\n        } catch (e) {\n            this.renderErrorNotification([\"Erro a fazer o pedido\"]);\n            return;\n        }\n\n        const historical = data.temporal_conditions;\n        const historical_data = [];\n        historical.map((value) => {\n            historical_data.push({\n                date: new Date(value.date).toLocaleString('pt-PT', {\n                    'hour12': false,\n                }),\n                air_score: value.air_score,\n                raw_date: Date.parse(value.date)\n            })\n        });\n\n        const labels = [];\n        const dataset_data = [];\n        const raw_dates = [];\n        historical_data.map((value) => {\n            labels.push(value.date);\n            dataset_data.push(value.air_score);\n            raw_dates.push(value.raw_date);\n        });\n\n\n        await this.setState({\n                labels: labels,\n                dataset_data: dataset_data,\n                raw_dates: raw_dates\n            }\n        );\n\n    };\n\n    fullData = canvas => {\n        let ctx = canvas.getContext(\"2d\");\n\n        let gradientStrokeForecast = ctx.createLinearGradient(0, 230, 0, 50);\n        let gradientStrokeHistorical = ctx.createLinearGradient(0, 230, 0, 50);\n\n        gradientStrokeForecast.addColorStop(1, \"rgba(29,140,248,0.2)\");\n        gradientStrokeForecast.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\n        gradientStrokeForecast.addColorStop(0, \"rgba(29,140,248,0)\");\n\n\n        gradientStrokeHistorical.addColorStop(1, \"rgb(186, 84, 245,0.2)\");\n        gradientStrokeHistorical.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\n        gradientStrokeForecast.addColorStop(0, \"#ba54f5\");\n\n\n        const dataSize = this.state.dataset_data.length;\n\n        const historical_data = this.state.dataset_data.slice(0, dataSize / 2);\n        const forecast_data = this.state.dataset_data.slice(dataSize / 2, dataSize + 1);\n        for (let i = 0; i < dataSize / 2; i++) {\n            historical_data.push(null);\n            forecast_data.unshift(null);\n        }\n\n\n        return {\n            labels: this.state.labels,\n            datasets: [\n                {\n                    label: \"Historical Score\",\n                    fill: true,\n                    backgroundColor: gradientStrokeHistorical,\n                    borderColor: \"#ba54f5\",\n                    borderWidth: 2,\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    pointBackgroundColor: \"#ba54f5\",\n                    pointBorderColor: \"rgba(255,255,255,0)\",\n                    pointHoverBackgroundColor: \"#ba54f5\",\n                    pointBorderWidth: 20,\n                    pointHoverRadius: 4,\n                    pointHoverBorderWidth: 15,\n                    pointRadius: 4,\n                    data: historical_data\n                },\n                {\n                    label: \"Forecast Score\",\n                    fill: true,\n                    backgroundColor: gradientStrokeForecast,\n                    borderColor: \"#1f8ef1\",\n                    borderWidth: 2,\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    pointBackgroundColor: \"#1f8ef1\",\n                    pointBorderColor: \"rgba(255,255,255,0)\",\n                    pointHoverBackgroundColor: \"#1f8ef1\",\n                    pointBorderWidth: 20,\n                    pointHoverRadius: 4,\n                    pointHoverBorderWidth: 15,\n                    pointRadius: 4,\n                    data: forecast_data\n                }\n            ]\n        };\n    };\n\n\n    elementClick = (e) => {\n        if (e.length === 0)\n            return;\n        const data = e[0];\n        const index = data._index;\n\n        const pickedRawData = this.state.raw_dates[index];\n\n        this.fetchTemporalAir(pickedRawData)\n\n    };\n\n    fetchTemporalAir = async (raw_data) => {\n\n        const latitude = this.state.city_data.cityLatitude;\n        const longitude = this.state.city_data.cityLongitude;\n\n        const href = `${REST_HOST}/air/by-date/lat=${latitude}&long=${longitude}&datetime=${raw_data}`;\n        let data = [];\n        try {\n            const Rdata = await axios.get(href);\n            data = Rdata.data;\n        } catch (e) {\n            this.renderErrorNotification([\"Erro a fazer o pedido\"]);\n            return;\n        }\n\n\n        localStorage.setItem('historical_city_data', JSON.stringify(data));\n        window.location.href = \"/admin/air\"\n\n    }\n\n\n    defineHours = async (event) => {\n        event.preventDefault();\n        const horas = this.horasInput.current._reactInternalFiber.child.stateNode.valueAsNumber;\n        await this.setState({\n            horas: horas\n        });\n        this.loadData();\n    };\n\n    render() {\n        return (\n            <>\n                <div className=\"react-notification-alert-container\">\n                    <NotificationAlert ref=\"notificationAlert\"/>\n                </div>\n                <div className=\"content\">\n                    <Row>\n                        <Col xs=\"12\">\n                            <Card className=\"card-chart\">\n                                <CardHeader>\n                                    <Form onSubmit={this.defineHours}>\n                                        <Row>\n\n                                            <Col className=\"text-left\" sm=\"6\">\n                                                <h5 className=\"card-category\">{this.state.city_data.cityName}</h5>\n                                                <CardTitle tag=\"h2\">Historical/Forecast</CardTitle>\n                                            </Col>\n                                            <Col sm=\"3\">\n                                                <label>Horas</label>\n                                                <Input\n                                                    ref={this.horasInput}\n                                                    defaultValue={this.state.horas}\n                                                    placeholder=\"Horas\"\n                                                    type=\"number\"\n                                                    step=\"1\"\n                                                    name=\"horas\"\n                                                    id=\"horas\"\n\n                                                />\n                                            </Col>\n                                            <Col sm=\"3\">\n                                                <Button className=\"btn-fill\" color=\"primary\" type=\"submit\">\n                                                    Submeter\n                                                </Button>\n\n                                            </Col>\n\n                                        </Row>\n                                    </Form>\n                                </CardHeader>\n                                <CardBody>\n                                    <div className=\"chart-area\">\n                                        <Line\n                                            data={this.fullData}\n                                            options={chartExample1.options}\n                                            onElementsClick={this.elementClick}\n                                        />\n                                    </div>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </div>\n\n            </>\n        );\n    }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}